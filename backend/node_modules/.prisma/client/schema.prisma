// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  avatar    String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  addresses     Address[]
  cart          Cart?
  favoriteItems FavoriteItem[]
}

// 用户角色枚举
enum Role {
  ADMIN
  CUSTOMER
  MERCHANT
}

// 商品模型
model Product {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  comparePrice Float?
  stock        Int      @default(0)
  images       String[]
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderItems    OrderItem[]
  cartItems     CartItem[]
  favoriteItems FavoriteItem[]
}

// 商品分类模型
model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  image     String?
  products  Product[]
  parent    Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  parentId  String?
  children  Category[] @relation("CategoryToSubcategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// 地址模型
model Address {
  id        String   @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

// 订单模型
model Order {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String
  paymentMethod   String?
  paymentId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// 订单状态枚举
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

// 订单项模型
model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 购物车模型
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// 购物车项模型
model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

// 收藏项模型
model FavoriteItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
